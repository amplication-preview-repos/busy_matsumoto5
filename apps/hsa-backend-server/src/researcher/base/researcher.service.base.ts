/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Researcher as PrismaResearcher } from "@prisma/client";

export class ResearcherServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ResearcherCountArgs, "select">
  ): Promise<number> {
    return this.prisma.researcher.count(args);
  }

  async researchers(
    args: Prisma.ResearcherFindManyArgs
  ): Promise<PrismaResearcher[]> {
    return this.prisma.researcher.findMany(args);
  }
  async researcher(
    args: Prisma.ResearcherFindUniqueArgs
  ): Promise<PrismaResearcher | null> {
    return this.prisma.researcher.findUnique(args);
  }
  async createResearcher(
    args: Prisma.ResearcherCreateArgs
  ): Promise<PrismaResearcher> {
    return this.prisma.researcher.create(args);
  }
  async updateResearcher(
    args: Prisma.ResearcherUpdateArgs
  ): Promise<PrismaResearcher> {
    return this.prisma.researcher.update(args);
  }
  async deleteResearcher(
    args: Prisma.ResearcherDeleteArgs
  ): Promise<PrismaResearcher> {
    return this.prisma.researcher.delete(args);
  }
}
