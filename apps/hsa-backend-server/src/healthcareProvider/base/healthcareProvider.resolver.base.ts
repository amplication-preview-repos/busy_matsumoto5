/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { HealthcareProvider } from "./HealthcareProvider";
import { HealthcareProviderCountArgs } from "./HealthcareProviderCountArgs";
import { HealthcareProviderFindManyArgs } from "./HealthcareProviderFindManyArgs";
import { HealthcareProviderFindUniqueArgs } from "./HealthcareProviderFindUniqueArgs";
import { DeleteHealthcareProviderArgs } from "./DeleteHealthcareProviderArgs";
import { HealthcareProviderService } from "../healthcareProvider.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => HealthcareProvider)
export class HealthcareProviderResolverBase {
  constructor(
    protected readonly service: HealthcareProviderService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "HealthcareProvider",
    action: "read",
    possession: "any",
  })
  async _healthcareProvidersMeta(
    @graphql.Args() args: HealthcareProviderCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [HealthcareProvider])
  @nestAccessControl.UseRoles({
    resource: "HealthcareProvider",
    action: "read",
    possession: "any",
  })
  async healthcareProviders(
    @graphql.Args() args: HealthcareProviderFindManyArgs
  ): Promise<HealthcareProvider[]> {
    return this.service.healthcareProviders(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => HealthcareProvider, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "HealthcareProvider",
    action: "read",
    possession: "own",
  })
  async healthcareProvider(
    @graphql.Args() args: HealthcareProviderFindUniqueArgs
  ): Promise<HealthcareProvider | null> {
    const result = await this.service.healthcareProvider(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => HealthcareProvider)
  @nestAccessControl.UseRoles({
    resource: "HealthcareProvider",
    action: "delete",
    possession: "any",
  })
  async deleteHealthcareProvider(
    @graphql.Args() args: DeleteHealthcareProviderArgs
  ): Promise<HealthcareProvider | null> {
    try {
      return await this.service.deleteHealthcareProvider(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
